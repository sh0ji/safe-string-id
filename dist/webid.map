{"version":3,"sources":["constants.js","webid.js"],"names":["getCharacters","delimiter","standard","replace","DefaultOptions","Private","WeakMap","Errors","TYPE_IS_STRING","str","TypeError","STRICT_DELIMITER","test","value","Error","NON_STRICT_DELIMITER","VALID_PREFIX","Assertions","obj","keys","forEach","a","v","err","assertion","error","WebId","opts","configure","replacement","options","remove","lower","delim","slug","slugifyOpts","strict","prefix","pre","suffix","suf","_str","_options","createSlug","characters","delimiterInShortid","shortid","short","generate","maxLength","length","uniqueSlug","substr","join","parse","id","unique","get","set","trim","endsWith","startsWith","module","exports"],"mappings":"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","file":"webid.map","sourceRoot":"../src","sourcesContent":["export const getCharacters = (delimiter) => {\n\tconst standard = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-_';\n\tconst replacement = (delimiter === '~') ? '-' : '~';\n\treturn (delimiter) ? standard.replace(delimiter, replacement) : standard;\n};\n\nexport const DefaultOptions = {\n\tdelimiter: '-',\n\tdelimiterInShortid: false,\n\tlower: true,\n\tmaxLength: 128,\n\tremove: null,\n\tstrict: true,\n};\n\nexport const Private = {\n\tdelimiter: new WeakMap(),\n\tprefix: new WeakMap(),\n\tsuffix: new WeakMap(),\n};\n\nexport const Errors = {\n\tTYPE_IS_STRING: str => ({\n\t\tassertion: typeof str === 'string',\n\t\terror: new TypeError(`Expected a string. Received ${typeof str}.`),\n\t}),\n\tSTRICT_DELIMITER: value => ({\n\t\tassertion: /^[\\w-._~]*$/.test(value),\n\t\terror: new Error(`${value} is not a safe delimiter.`),\n\t}),\n\tNON_STRICT_DELIMITER: value => ({\n\t\tassertion: /^\\S*$/g.test(value),\n\t\terror: new Error('The delimiter cannot be a space.'),\n\t}),\n\tVALID_PREFIX: value => ({\n\t\tassertion: /^[a-z]+/i.test(value),\n\t\terror: new Error('prefix must begin with a letter (a-z).'),\n\t}),\n};\n\nexport const Assertions = (() => {\n\tconst obj = {};\n\tObject.keys(Errors).forEach((a) => {\n\t\tobj[a] = (v) => {\n\t\t\tconst err = Errors[a](v);\n\t\t\tif (!err.assertion) {\n\t\t\t\tthrow err.error;\n\t\t\t}\n\t\t};\n\t});\n\treturn obj;\n})();\n","import short from 'shortid';\nimport slugify from 'slugify';\nimport {\n\tgetCharacters, DefaultOptions, Private, Assertions,\n} from './constants';\n\nclass WebId {\n\tconstructor(opts = {}) {\n\t\tthis.configure(opts);\n\t}\n\n\tget delimiter() {\n\t\treturn Private.delimiter.get(this);\n\t}\n\n\tset delimiter(value) {\n\t\tif (this.options.strict) {\n\t\t\tAssertions.STRICT_DELIMITER(value);\n\t\t} else {\n\t\t\tAssertions.NON_STRICT_DELIMITER(value);\n\t\t}\n\t\tPrivate.delimiter.set(this, value);\n\t}\n\n\tget prefix() {\n\t\treturn Private.prefix.get(this);\n\t}\n\n\tset prefix(value) {\n\t\tif (!value) {\n\t\t\tPrivate.prefix.set(this, '');\n\t\t\treturn;\n\t\t}\n\t\tAssertions.TYPE_IS_STRING(value);\n\t\tif (this.options.strict) Assertions.VALID_PREFIX(value);\n\t\tlet prefix = this.createSlug(value.trim(), null);\n\t\tif (prefix && !prefix.endsWith(this.delimiter)) {\n\t\t\tprefix += this.delimiter;\n\t\t}\n\t\tPrivate.prefix.set(this, prefix);\n\t}\n\n\tget suffix() {\n\t\treturn Private.suffix.get(this);\n\t}\n\n\tset suffix(value) {\n\t\tif (!value) {\n\t\t\tPrivate.suffix.set(this, '');\n\t\t\treturn;\n\t\t}\n\t\tAssertions.TYPE_IS_STRING(value);\n\t\tlet suffix = this.createSlug(value.trim(), null);\n\t\tif (suffix && !suffix.startsWith(this.delimiter)) {\n\t\t\tsuffix = this.delimiter + suffix;\n\t\t}\n\t\tPrivate.suffix.set(this, suffix);\n\t}\n\n\tslugifyOpts(replacement) {\n\t\treturn {\n\t\t\treplacement,\n\t\t\tremove: this.options.remove,\n\t\t\tlower: this.options.lower,\n\t\t};\n\t}\n\n\tcreateSlug(str, delim = this.delimiter) {\n\t\tconst slug = (str) ? slugify(str, this.slugifyOpts(delim)) : '';\n\t\tif (this.options.strict) {\n\t\t\t/** enable strict mode (html 4 / xhtml) */\n\t\t\treturn slug\n\t\t\t\t/** allowed characters: a-z, A-Z, 0-9, _, :, ., - */\n\t\t\t\t.replace(/[^\\w_:.-]/ig, this.delimiter)\n\t\t\t\t/** must start with letter */\n\t\t\t\t.replace(/^[^a-z]+/, '');\n\t\t}\n\t\treturn slug;\n\t}\n\n\tconfigure(opts = {}) {\n\t\tthis.options = { ...DefaultOptions, ...opts };\n\t\tthis.delimiter = this.options.delim || this.options.delimiter;\n\t\tthis.prefix = this.options.pre || this.options.prefix;\n\t\tthis.suffix = this.options.suf || this.options.suffix;\n\t}\n\n\tparse(_str, _options) {\n\t\tconst str = (typeof _str === 'string') ? _str : '';\n\t\tconst options = (typeof _str === 'object') ? _str : _options;\n\t\tif (options) this.configure(options);\n\t\tconst slug = this.createSlug(str);\n\t\tshort.characters(getCharacters((!this.options.delimiterInShortid) ? this.delimiter : null));\n\t\tconst shortid = short.generate();\n\t\tconst maxLength = this.options.maxLength - this.prefix.length - this.suffix.length;\n\t\tconst uniqueSlug = (slug)\n\t\t\t? [slug.substr(0, maxLength - shortid.length), shortid].join(this.delimiter)\n\t\t\t: shortid;\n\t\treturn {\n\t\t\tid: this.prefix + (slug.substr(0, maxLength) || shortid) + this.suffix,\n\t\t\tunique: this.prefix + uniqueSlug + this.suffix,\n\t\t\toriginal: str,\n\t\t\tslug,\n\t\t\tshortid,\n\t\t\tdelimiter: this.delimiter,\n\t\t\tprefix: this.prefix,\n\t\t\tsuffix: this.suffix,\n\t\t};\n\t}\n\n\tgenerate(str, options) {\n\t\treturn this.parse(str, options).id;\n\t}\n\n\tgenerateUnique(str, options) {\n\t\treturn this.parse(str, options).unique;\n\t}\n}\n\nmodule.exports = new WebId();\n"]}